// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dBiCopMar_cpp
double dBiCopMar_cpp(const double& xx, const double& yy, const int& cop_family, const double& cop_param, const int& marg_family, const arma::colvec& mar_param, const bool& ce, const bool& logd);
RcppExport SEXP _dnnmp_dBiCopMar_cpp(SEXP xxSEXP, SEXP yySEXP, SEXP cop_familySEXP, SEXP cop_paramSEXP, SEXP marg_familySEXP, SEXP mar_paramSEXP, SEXP ceSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const double& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const double& >::type cop_param(cop_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type marg_family(marg_familySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mar_param(mar_paramSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ce(ceSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dBiCopMar_cpp(xx, yy, cop_family, cop_param, marg_family, mar_param, ce, logd));
    return rcpp_result_gen;
END_RCPP
}
// dBiCopMar_cpp2
arma::colvec dBiCopMar_cpp2(const arma::colvec& xx, const arma::colvec& yy, const int& cop_family, const arma::colvec cop_param, const int& marg_family, const arma::mat& mar_param, const bool& ce, const bool& logd);
RcppExport SEXP _dnnmp_dBiCopMar_cpp2(SEXP xxSEXP, SEXP yySEXP, SEXP cop_familySEXP, SEXP cop_paramSEXP, SEXP marg_familySEXP, SEXP mar_paramSEXP, SEXP ceSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type cop_param(cop_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type marg_family(marg_familySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mar_param(mar_paramSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ce(ceSEXP);
    Rcpp::traits::input_parameter< const bool& >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dBiCopMar_cpp2(xx, yy, cop_family, cop_param, marg_family, mar_param, ce, logd));
    return rcpp_result_gen;
END_RCPP
}
// updateFullCopLabel
List updateFullCopLabel(const arma::colvec& yy, const arma::mat& yy_ne, const int& nne, const arma::mat& weight, const arma::mat& rho, const int& cop_family, const int& marg_family, const arma::colvec& yy_param1, const arma::colvec& yy_param2, const arma::mat& yy_ne_param1, const arma::mat& yy_ne_param2, const arma::colvec& logit_mu, const arma::colvec& logit_ka, const arma::mat& cutoff);
RcppExport SEXP _dnnmp_updateFullCopLabel(SEXP yySEXP, SEXP yy_neSEXP, SEXP nneSEXP, SEXP weightSEXP, SEXP rhoSEXP, SEXP cop_familySEXP, SEXP marg_familySEXP, SEXP yy_param1SEXP, SEXP yy_param2SEXP, SEXP yy_ne_param1SEXP, SEXP yy_ne_param2SEXP, SEXP logit_muSEXP, SEXP logit_kaSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yy_ne(yy_neSEXP);
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const int& >::type marg_family(marg_familySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy_param1(yy_param1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy_param2(yy_param2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yy_ne_param1(yy_ne_param1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yy_ne_param2(yy_ne_param2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type logit_mu(logit_muSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type logit_ka(logit_kaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(updateFullCopLabel(yy, yy_ne, nne, weight, rho, cop_family, marg_family, yy_param1, yy_param2, yy_ne_param1, yy_ne_param2, logit_mu, logit_ka, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// updateCeCopAux
List updateCeCopAux(const arma::colvec& yy, const arma::colvec& oo, const arma::colvec& rho, const arma::colvec& ne_label, const int& cop_family, const int& mar_family, const arma::colvec& yy_param1, const arma::colvec& yy_param2);
RcppExport SEXP _dnnmp_updateCeCopAux(SEXP yySEXP, SEXP ooSEXP, SEXP rhoSEXP, SEXP ne_labelSEXP, SEXP cop_familySEXP, SEXP mar_familySEXP, SEXP yy_param1SEXP, SEXP yy_param2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type oo(ooSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ne_label(ne_labelSEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const int& >::type mar_family(mar_familySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy_param1(yy_param1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type yy_param2(yy_param2SEXP);
    rcpp_result_gen = Rcpp::wrap(updateCeCopAux(yy, oo, rho, ne_label, cop_family, mar_family, yy_param1, yy_param2));
    return rcpp_result_gen;
END_RCPP
}
// pCopPoNNMP_ref_simple
arma::mat pCopPoNNMP_ref_simple(const arma::colvec& obs, const int& cop_family, const arma::cube& cop_param, const arma::mat& ref_ne, const arma::umat& ref_ne_idx, const arma::mat& oo, const arma::colvec& th, const arma::cube& weight);
RcppExport SEXP _dnnmp_pCopPoNNMP_ref_simple(SEXP obsSEXP, SEXP cop_familySEXP, SEXP cop_paramSEXP, SEXP ref_neSEXP, SEXP ref_ne_idxSEXP, SEXP ooSEXP, SEXP thSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type cop_param(cop_paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ref_ne(ref_neSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type ref_ne_idx(ref_ne_idxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type oo(ooSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type th(thSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(pCopPoNNMP_ref_simple(obs, cop_family, cop_param, ref_ne, ref_ne_idx, oo, th, weight));
    return rcpp_result_gen;
END_RCPP
}
// pCopNbNNMP_ref_covar
arma::mat pCopNbNNMP_ref_covar(const arma::colvec& obs, const int& cop_family, const arma::cube& cop_param, const arma::mat& ref_XX, const arma::mat& ref_ne, const arma::umat& ref_ne_idx, const arma::mat& oo, const arma::mat& bb, const arma::colvec& size, const arma::cube& weight);
RcppExport SEXP _dnnmp_pCopNbNNMP_ref_covar(SEXP obsSEXP, SEXP cop_familySEXP, SEXP cop_paramSEXP, SEXP ref_XXSEXP, SEXP ref_neSEXP, SEXP ref_ne_idxSEXP, SEXP ooSEXP, SEXP bbSEXP, SEXP sizeSEXP, SEXP weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type cop_param(cop_paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ref_XX(ref_XXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ref_ne(ref_neSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type ref_ne_idx(ref_ne_idxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type oo(ooSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bb(bbSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type weight(weightSEXP);
    rcpp_result_gen = Rcpp::wrap(pCopNbNNMP_ref_covar(obs, cop_family, cop_param, ref_XX, ref_ne, ref_ne_idx, oo, bb, size, weight));
    return rcpp_result_gen;
END_RCPP
}
// refNe
List refNe(const int& nne, const arma::mat& coords, const arma::colvec& obs);
RcppExport SEXP _dnnmp_refNe(SEXP nneSEXP, SEXP coordsSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(refNe(nne, coords, obs));
    return rcpp_result_gen;
END_RCPP
}
// gridNe
List gridNe(const int& nne, const arma::mat& coords, const arma::mat& grid, const arma::colvec& obs);
RcppExport SEXP _dnnmp_gridNe(SEXP nneSEXP, SEXP coordsSEXP, SEXP gridSEXP, SEXP obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type coords(coordsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    rcpp_result_gen = Rcpp::wrap(gridNe(nne, coords, grid, obs));
    return rcpp_result_gen;
END_RCPP
}
// predCeCopNNMP_simple
List predCeCopNNMP_simple(const arma::colvec& obs, const int& cop_family, const arma::cube& cop_param, const int& marg_family, const arma::mat marg_param, const int& nne, const arma::mat& DD, const arma::colvec zeta, const arma::mat& ga, const arma::colvec kasq, const arma::mat oo, const arma::mat grid_ne_idx, const arma::mat grid_ne_dist, const arma::colvec& probs, double lb, double ub, double tol, int maxit, int nreport, const bool verbose, const bool sam);
RcppExport SEXP _dnnmp_predCeCopNNMP_simple(SEXP obsSEXP, SEXP cop_familySEXP, SEXP cop_paramSEXP, SEXP marg_familySEXP, SEXP marg_paramSEXP, SEXP nneSEXP, SEXP DDSEXP, SEXP zetaSEXP, SEXP gaSEXP, SEXP kasqSEXP, SEXP ooSEXP, SEXP grid_ne_idxSEXP, SEXP grid_ne_distSEXP, SEXP probsSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP nreportSEXP, SEXP verboseSEXP, SEXP samSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type cop_param(cop_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type marg_family(marg_familySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type marg_param(marg_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type DD(DDSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ga(gaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type kasq(kasqSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type oo(ooSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type grid_ne_idx(grid_ne_idxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type grid_ne_dist(grid_ne_distSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type nreport(nreportSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type sam(samSEXP);
    rcpp_result_gen = Rcpp::wrap(predCeCopNNMP_simple(obs, cop_family, cop_param, marg_family, marg_param, nne, DD, zeta, ga, kasq, oo, grid_ne_idx, grid_ne_dist, probs, lb, ub, tol, maxit, nreport, verbose, sam));
    return rcpp_result_gen;
END_RCPP
}
// predCeCopNNMP_covars
List predCeCopNNMP_covars(const arma::colvec& obs, const int& cop_family, const arma::cube& cop_param, const int& marg_family, const arma::mat ref_marg_param1, const arma::mat ref_marg_param2, const arma::mat nonref_marg_param1, const arma::mat nonref_marg_param2, const int& nne, const arma::mat& DD, const arma::colvec zeta, const arma::mat& ga, const arma::colvec kasq, const arma::mat& oo, const arma::mat grid_ne_idx, const arma::mat grid_ne_dist, const arma::colvec& probs, double lb, double ub, double tol, int maxit, int nreport, const bool verbose, const bool sam);
RcppExport SEXP _dnnmp_predCeCopNNMP_covars(SEXP obsSEXP, SEXP cop_familySEXP, SEXP cop_paramSEXP, SEXP marg_familySEXP, SEXP ref_marg_param1SEXP, SEXP ref_marg_param2SEXP, SEXP nonref_marg_param1SEXP, SEXP nonref_marg_param2SEXP, SEXP nneSEXP, SEXP DDSEXP, SEXP zetaSEXP, SEXP gaSEXP, SEXP kasqSEXP, SEXP ooSEXP, SEXP grid_ne_idxSEXP, SEXP grid_ne_distSEXP, SEXP probsSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP nreportSEXP, SEXP verboseSEXP, SEXP samSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type obs(obsSEXP);
    Rcpp::traits::input_parameter< const int& >::type cop_family(cop_familySEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type cop_param(cop_paramSEXP);
    Rcpp::traits::input_parameter< const int& >::type marg_family(marg_familySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ref_marg_param1(ref_marg_param1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type ref_marg_param2(ref_marg_param2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type nonref_marg_param1(nonref_marg_param1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type nonref_marg_param2(nonref_marg_param2SEXP);
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type DD(DDSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ga(gaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec >::type kasq(kasqSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type oo(ooSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type grid_ne_idx(grid_ne_idxSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type grid_ne_dist(grid_ne_distSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type nreport(nreportSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool >::type sam(samSEXP);
    rcpp_result_gen = Rcpp::wrap(predCeCopNNMP_covars(obs, cop_family, cop_param, marg_family, ref_marg_param1, ref_marg_param2, nonref_marg_param1, nonref_marg_param2, nne, DD, zeta, ga, kasq, oo, grid_ne_idx, grid_ne_dist, probs, lb, ub, tol, maxit, nreport, verbose, sam));
    return rcpp_result_gen;
END_RCPP
}
// qCEpois
double qCEpois(double pp, double rate, double rate_fake, double lower, double upper, double tol, int maxit);
RcppExport SEXP _dnnmp_qCEpois(SEXP ppSEXP, SEXP rateSEXP, SEXP rate_fakeSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< double >::type rate_fake(rate_fakeSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(qCEpois(pp, rate, rate_fake, lower, upper, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// qCEnbinom
double qCEnbinom(double pp, double size, double mu, double lower, double upper, double tol, int maxit);
RcppExport SEXP _dnnmp_qCEnbinom(SEXP ppSEXP, SEXP sizeSEXP, SEXP muSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP tolSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pp(ppSEXP);
    Rcpp::traits::input_parameter< double >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(qCEnbinom(pp, size, mu, lower, upper, tol, maxit));
    return rcpp_result_gen;
END_RCPP
}
// logitGausWeight1_cpp
List logitGausWeight1_cpp(const int& nne, const arma::mat& dist, const double& zeta, const arma::colvec& mu, const arma::colvec& ka);
RcppExport SEXP _dnnmp_logitGausWeight1_cpp(SEXP nneSEXP, SEXP distSEXP, SEXP zetaSEXP, SEXP muSEXP, SEXP kaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ka(kaSEXP);
    rcpp_result_gen = Rcpp::wrap(logitGausWeight1_cpp(nne, dist, zeta, mu, ka));
    return rcpp_result_gen;
END_RCPP
}
// logitGausWeight2_cpp
List logitGausWeight2_cpp(const int& nne, const arma::mat& dist, const double& zeta, const arma::colvec& mu, const arma::colvec& ka);
RcppExport SEXP _dnnmp_logitGausWeight2_cpp(SEXP nneSEXP, SEXP distSEXP, SEXP zetaSEXP, SEXP muSEXP, SEXP kaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type nne(nneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const double& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type ka(kaSEXP);
    rcpp_result_gen = Rcpp::wrap(logitGausWeight2_cpp(nne, dist, zeta, mu, ka));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dnnmp_dBiCopMar_cpp", (DL_FUNC) &_dnnmp_dBiCopMar_cpp, 8},
    {"_dnnmp_dBiCopMar_cpp2", (DL_FUNC) &_dnnmp_dBiCopMar_cpp2, 8},
    {"_dnnmp_updateFullCopLabel", (DL_FUNC) &_dnnmp_updateFullCopLabel, 14},
    {"_dnnmp_updateCeCopAux", (DL_FUNC) &_dnnmp_updateCeCopAux, 8},
    {"_dnnmp_pCopPoNNMP_ref_simple", (DL_FUNC) &_dnnmp_pCopPoNNMP_ref_simple, 8},
    {"_dnnmp_pCopNbNNMP_ref_covar", (DL_FUNC) &_dnnmp_pCopNbNNMP_ref_covar, 10},
    {"_dnnmp_refNe", (DL_FUNC) &_dnnmp_refNe, 3},
    {"_dnnmp_gridNe", (DL_FUNC) &_dnnmp_gridNe, 4},
    {"_dnnmp_predCeCopNNMP_simple", (DL_FUNC) &_dnnmp_predCeCopNNMP_simple, 21},
    {"_dnnmp_predCeCopNNMP_covars", (DL_FUNC) &_dnnmp_predCeCopNNMP_covars, 24},
    {"_dnnmp_qCEpois", (DL_FUNC) &_dnnmp_qCEpois, 7},
    {"_dnnmp_qCEnbinom", (DL_FUNC) &_dnnmp_qCEnbinom, 7},
    {"_dnnmp_logitGausWeight1_cpp", (DL_FUNC) &_dnnmp_logitGausWeight1_cpp, 5},
    {"_dnnmp_logitGausWeight2_cpp", (DL_FUNC) &_dnnmp_logitGausWeight2_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_dnnmp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
